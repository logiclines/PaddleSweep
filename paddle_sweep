//The MIT License (MIT)

//Copyright (c) 2013 Mick Grierson, Matthew Yee-King, Marco Gillies

//Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.




PImage a;
int l, m, x, y, p, q,score;
int x_range = 800;
int y_range = 600;
boolean scoreset = true;
boolean keyup = false;
boolean keyright = false;
boolean keyleft = false;
boolean keydown = false;
//variables with number subscripts are meant to represent different balls.
PVector location;  // Location of shape
PVector velocity;  // Velocity of shape
PVector location1;  // Location of shape
PVector velocity1;  // Velocity of shape
PVector location2;  // Location of shape
PVector velocity2;  // Velocity of shape
PVector location3;  // Location of shape
PVector velocity3;  // Velocity of shape
boolean recent_hit = true;
boolean recent_hit1 = true;
boolean recent_hit2 = true;
int recent_hit3 = 2;
public int timer;
int s;

boolean zeroonce = false;
boolean zerotwice = false;
boolean zerothrice = false;
boolean zerofour = false;
boolean zerofive = false;
boolean zerosix = false;
boolean newgame = false;
boolean gameover = false;
Maxim Maxim;
AudioPlayer paddle;

void setup() {
  gameover = false;
  timer = 0;
  zeroonce = false;
  zerotwice = false;
  zerothrice = false;
  zerofour = false;
  zerofive = false;
  zerosix = false;
  size(800,600);
  smooth();
  location = new PVector(200,200);
  velocity = new PVector(13,13);
  location1 = new PVector(600,200);
  velocity1 = new PVector(11,11);
  location2 = new PVector(200,400);
  velocity2 = new PVector(10,10);
  location3 = new PVector(600,400);
  velocity3 = new PVector(9,9);
  a = loadImage("space.jpg");
  x = 396;
  y = 220;
  s = second();
  Maxim = new Maxim(this);
  paddle = Maxim.loadFile("paddle1.wav");
  paddle.setLooping(false);
  paddle.volume(1.0);
  loop();
}

void draw() {

  gameover = false;
  timer = second() - s;

  if(timer<0)
  {
    timer = timer + 60;
  if(timer == 59)
  {
    zeroonce = true;
  }
  }

  if(zeroonce)
    {      
    timer = timer + 60;
    if(timer == 119)
    {
      timer = timer - 60;
    }
    if(timer == 118)
    {
     zerotwice = true;
    }
    }
  if(zerotwice)
  {

    timer = timer + 60;
    if(timer == 178)
    {
      timer = timer - 60;
    }
    if(timer == 177)
    {
       zerothrice = true;
    }
  }
 if (zerothrice)
  {
    timer = timer + 60;
    if(timer == 237)
    {
      timer = timer - 60;
    }
    if(timer == 236)
    {
      zerofour = true;
    }
    
  }
  
  if (zerofour)
  {
    timer = timer + 60;
    if(timer == 296)
    {
      timer = timer - 60;
    }
    if(timer == 295)
    {
      zerofive = true;
    }
    
  }
  
  if (zerofive)
  {
    timer = timer + 60;
    if(timer == 355)
    {
      timer = timer - 60;
    }
    if(timer == 354)
    {
      zerosix = true;
    }
    
  }
  
  if (zerosix)
  {
    timer = timer + 60;
    if(timer == 414)
    {
      timer = timer - 60;
    }
    if(timer == 413)
    {
      zerosix = true;
    }    
  }

  
  background(226);
  scoreset = true;
  // Add velocity to the location.
  location.add(velocity);
  location1.add(velocity1);
  location2.add(velocity2);
  location3.add(velocity3);

  
  // Bounce off edges
  if ((location.x > width - 60) || (location.x < 60)) {
    velocity.x = velocity.x * -1;
  }
  if (location.y > height - 20 || (location.y < 20)) {
    velocity.y = velocity.y * -1; 
  }
  if ((location1.x > width - 60) || (location1.x < 60)) {
    velocity1.x = velocity1.x * -1; 
  }
  if (location1.y > height - 15 || (location1.y < 15)) {
    velocity1.y = velocity1.y * -1; 
  }
  if ((location2.x > width - 60) || (location2.x < 60)) {
    velocity2.x = velocity2.x * -1; 
  }
  if (location2.y > height - 20 || (location2.y < 20)) {
    velocity2.y = velocity2.y * -1; 
  }
  //Logic for paddle contact
  if(recent_hit){
  if ((y - 5  <= location.y ) && (y + 65 >= location.y) && (x - 5 <= location.x) && (x + 15 >= location.x)) {
      velocity.x = velocity.x * -1;
//    velocity.y = velocity.y * -1; Bounce the balls of the paddle in a completely opposite direction by removing commenting here.
      score+=4;
      
      print("\nScore is : " + score);
      recent_hit = false;
      paddle.play();

  }
  }
  else
  {
    recent_hit = true;
  }
  if(recent_hit1){
  if ((y - 5  <= location1.y ) && (y + 65 >= location1.y) && (x - 5 <= location1.x) && (x + 15 >= location1.x)) {
    velocity1.x = velocity1.x * -1;
//    velocity1.y = velocity1.y * -1;
      score+=3;
      print("\nScore is : " + score);
      recent_hit1 = false;
      paddle.play();
      
  }    
  }
  else
  {
    recent_hit1 = true;
  }
  if(recent_hit2){
  if ((y - 5  <= location2.y ) && (y + 65 >= location2.y) && (x - 5 <= location2.x) && (x + 15 >= location2.x)) {
    velocity2.x = velocity2.x * -1;
//    velocity2.y = velocity2.y * -1;
      score+=2;
      print("\nScore is : " + score);
      recent_hit2 = false;
    paddle.play();
      
  }
  }
  else
  {
    recent_hit2 = true;
  }
  if ((location3.x > width - 60) || (location3.x < 60)) {
    velocity3.x = velocity3.x * -1; 
  }
  if (location3.y > height - 20 || (location3.y < 20)) {
    velocity3.y = velocity3.y * -1; }
  if(recent_hit3 == 2){
  if ((y - 5  <= location3.y ) && (y + 65 >= location3.y) && (x - 5 <= location3.x) && (x + 20 >= location3.x)) {
      velocity3.x = velocity3.x * -1;
//    velocity3.y = velocity3.y * -1;
      score+=1;
      print("\nScore is : " + score);
      recent_hit3 = 0;
      paddle.play();
      
  }
  }
  else
  {
    recent_hit3 += 1;
    if(recent_hit3 > 2)
   { 
    recent_hit3 = 2;
  }
  }
  
  image( a, 0, 0 );

  if (keyup) 
  {
    if (y<20)
    {
      y = 20;
    }
  y=y-8;
  }
  if (keydown)
  {  
     if (y>y_range - 75)
    {
      y = y_range - 75;
    }
  y=y+8;
  }
  if (keyright) 
  {

  }
  if (keyleft) 
  {

  }
  stroke(255);
  strokeWeight(2);
  fill(255,255,0,227);
  ellipse(location.x,location.y,20,20);
  fill(255,0,255,227);
  ellipse(location1.x,location1.y,20,20);
  fill(0,255,255,227);
  ellipse(location2.x,location2.y,20,20);
  fill(255,0,0,227);
  ellipse(location3.x,location3.y,20,20);
  fill(0,0,0,210);
  rect(0,0,50,600);
  fill(0,0,0,210);
  rect(750,0,50,600);
  fill(0,0,0);
  rect(399,0,2,600);
  fill(0,0,0);
  rect(48,0,2,600);
  fill(0,0,0);
  rect(750,0,2,600);
  fill(0,0,0,10);
  ellipse(400, 300, 100, 100);
  fill(0,0,0,255);
  rect(x,y,8,60);
  fill(255,255,255,255);
  textSize(40);
  if(score >= 100)
  {
  textSize(40);
  text("Game Over!", 286, 200);
  textSize(40);
  text("Click on the mouse to score again", 80, 500);
  text("Your paddle lasted ",100, 400); 
  text(timer,475, 400);
  text("Seconds",555, 400);
  timer = 0;
  gameover = true;
  gameover();
  }
    
  text("Hit-Limit", 60, 50);
  text(score,90,100);
  
  text(timer,700,100);
//  zeroonce = true;
}

void gameover(){

  timer = 0;
  gameover = true;
  noLoop();
  
}
void keyPressed() {
  if (key == CODED) {
    if (keyCode == UP) keyup = true; 
    if (keyCode == DOWN) keydown = true; 
    if (keyCode == LEFT) keyleft = true; 
    if (keyCode == RIGHT) keyright = true; 
  }
} 
void keyReleased() {
  if (key == CODED) {
    if (keyCode == UP) keyup = false; 
    if (keyCode == DOWN) keydown = false; 
    if (keyCode == LEFT) keyleft = false; 
    if (keyCode == RIGHT) keyright = false;
  }
}

void mouseClicked(){
if(gameover){
score = 0;
timer = 0;
s = 0;
setup();
}
}
