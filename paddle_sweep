//Audio Library if a soundtrack needs to be added
//import ddf.minim.spi.*;
//import ddf.minim.signals.*;
//import ddf.minim.*;
//import ddf.minim.analysis.*;
//import ddf.minim.ugens.*;
//import ddf.minim.effects.*;

PImage a;
int l, m, x, y, p, q,score;
int x_range = 800;
int y_range = 600;
boolean scoreset = true;
boolean keyup = false;
boolean keyright = false;
boolean keyleft = false;
boolean keydown = false;
//variables with number subscripts are meant to represent different projectiles.
PVector location,velocity,location1, velocity1,location2, velocity2, location3, velocity3; //Variables for the location and velocities of of shape
//variables to keep track of velocity and location of the projectiles
boolean recent_hit = true; //Score keeping variables
boolean recent_hit1 = true;
boolean recent_hit2 = true;
int recent_hit3 = 2;
public int timer; //timer for the score keeping
int s;

boolean zeroonce = false; //flags to reflect timer overflow
boolean zerotwice = false;

boolean newgame = false;
boolean gameover = false;
//Minim minim; //Audio APIs
//AudioPlayer paddle;

void setup() {

  PFont johnFont;
  johnFont = loadFont("PalatinoLinotype-Italic-48.vlw");
  textFont(johnFont);
  gameover = false;
  timer = 0;
  zeroonce = false;
  zerotwice = false;

  size(800,600);
  smooth();
  location = new PVector(200,200);
  velocity = new PVector(33,33);
  location1 = new PVector(600,200);
  velocity1 = new PVector(29,29);
  location2 = new PVector(200,400);
  velocity2 = new PVector(25,25);
  location3 = new PVector(600,400);
  velocity3 = new PVector(21,21);
  //a = loadImage("space.jpg");
  x = 396;
  y = 220;
  s = second();  
  //minim = new Minim(this);
  //paddle = minim.loadFile("Storm.mp3");
  loop();
}

void draw() {
  gameover = false;
  timer = second() - s;
  //paddle.play();
  //timer to keep track of score
  if(timer<0)
  {
    timer = timer + 60;
      if(timer == 59)
      {
        zeroonce = true;
      }
  }

  if(zeroonce)
    {
      timer = timer + 60;
        //if(timer == 119)
        //{
        //  timer = timer - 60;
       // }
    }

  background(0);
  scoreset = true;
  // Add velocity to the location.
  location.add(velocity);
  location1.add(velocity1);
  location2.add(velocity2);
  location3.add(velocity3);

  
  // Bounce off edges
  if ((location.x > width - 60) || (location.x < 60))
  {
    velocity.x = velocity.x * -1;
  }
  if (location.y > height - 20 || (location.y < 20))
  {
    velocity.y = velocity.y * -1;
  }
  if ((location1.x > width - 60) || (location1.x < 60))
  {
    velocity1.x = velocity1.x * -1;
  }
  if (location1.y > height - 15 || (location1.y < 15))
  {
    velocity1.y = velocity1.y * -1;
  }
  if ((location2.x > width - 60) || (location2.x < 60))
  {
    velocity2.x = velocity2.x * -1;
  }
  if (location2.y > height - 20 || (location2.y < 20))
  {
    velocity2.y = velocity2.y * -1;
  }

  //Logic for paddle contact

  if(recent_hit)
  {
  if ((y - 5 <= location.y ) && (y + 65 >= location.y) && (x - 5 <= location.x) && (x + 15 >= location.x))
     {
      velocity.x = velocity.x * -1;
      score+=4;
      print("\nScore is : " + score);
      recent_hit = false;
      
     }
  }

  else
  {
    recent_hit = true;
  }

  if(recent_hit1)
  {
    if ((y - 5 <= location1.y ) && (y + 65 >= location1.y) && (x - 5 <= location1.x) && (x + 15 >= location1.x))
     {
      velocity1.x = velocity1.x * -1;
      score+=3;
      print("\nScore is : " + score);
      recent_hit1 = false;
      
     }
  }

  else
  {
    recent_hit1 = true;
  }
  if(recent_hit2)
  {
    if ((y - 5 <= location2.y ) && (y + 65 >= location2.y) && (x - 5 <= location2.x) && (x + 15 >= location2.x))
    {
      velocity2.x = velocity2.x * -1;
// velocity2.y = velocity2.y * -1;
      score+=2;
      print("\nScore is : " + score);
      recent_hit2 = false;
      
    }
  }

  else
  {
    recent_hit2 = true;
  }

  if ((location3.x > width - 60) || (location3.x < 60))
  {
    velocity3.x = velocity3.x * -1;
  }

  if (location3.y > height - 20 || (location3.y < 20))
  {
    velocity3.y = velocity3.y * -1;
  }

  if(recent_hit3 == 2)
  {
    if ((y - 5 <= location3.y ) && (y + 65 >= location3.y) && (x - 5 <= location3.x) && (x + 20 >= location3.x))
    {
      velocity3.x = velocity3.x * -1;
// velocity3.y = velocity3.y * -1;
      score+=1;
      print("\nScore is : " + score);
      recent_hit3 = 0;
      
    }
  }

  else
  {
    recent_hit3 += 1;
    if(recent_hit3 > 2)
    {
    recent_hit3 = 2;
    }
  }
  
  //image( a, 0, 0 );

  if (keyup)
  {
    if (y<20)
    {
      y = 20;
    }
    y=y-20;
  }
  if (keydown)
  {
     if (y>y_range - 75)
    {
      y = y_range - 75;
    }
    y=y+20;
  }
  if (keyright)
  {

  }
  if (keyleft)
  {

  }

  drawGame();
  scoreGame();
  text("Score", 60, 50);
  text(score,90,100);
  text("Timer", 670, 50);
  text(timer,700,100);

// zeroonce = true;
}

void drawGame()
{
  stroke(255);
  strokeWeight(2);
  fill(255,255,0,227);
  
  //Draw the elliptical projectiles
  ellipse(location.x,location.y,20,20);
  fill(255,0,255,227);
  ellipse(location1.x,location1.y,20,20);
  fill(0,255,255,227);
  ellipse(location2.x,location2.y,20,20);
  fill(255,0,0,227);
  ellipse(location3.x,location3.y,20,20);
  fill(0,0,0,210);
  
  //Draw the game board
  rect(0,0,50,600);
  fill(0,0,0,210);
  rect(750,0,50,600);
  fill(0,0,0);
  rect(399,0,2,600);
  fill(0,0,0);
  rect(48,0,2,600);
  fill(0,0,0);
  rect(750,0,2,600);
  fill(0,0,0,10);
  //ellipse(400, 300, 100, 100);
  fill(0,0,0,255);
  
  //Draw paddle
  rect(x-1,y-7.5,10,75);
  fill(255,255,255,255);
  textSize(40);
}

//Display score message
void scoreGame()
{
  if(timer == 100)
  {
  textSize(40);
  text("Game Over!", 286, 200);
  textSize(40);
  text("Click on the mouse to score again", 150, 500);
  text("Your Score is  ",230, 400);
  text(score,475, 400);
  timer = 0;
  gameover = true;
  gameover();
  }
}

//Stop game 
void gameover()
{
  timer = 0;
  gameover = true;
  //minim.stop();
  noLoop();
}

//move paddle
void keyPressed()
{
  if (key == CODED)
  {
    if (keyCode == UP) keyup = true;
    if (keyCode == DOWN) keydown = true;
    if (keyCode == LEFT) keyleft = true;
    if (keyCode == RIGHT) keyright = true;
  }
}

void keyReleased()
{
  if (key == CODED)
  {
    if (keyCode == UP) keyup = false;
    if (keyCode == DOWN) keydown = false;
    if (keyCode == LEFT) keyleft = false;
    if (keyCode == RIGHT) keyright = false;
  }
}

//restart game and refresh timer and score
void mouseClicked()
{
   if(gameover)
    {
      score = 0;
      timer = 0;
      s = 0;
      //paddle.close();
      //paddle.play();
      setup();
    }
}
